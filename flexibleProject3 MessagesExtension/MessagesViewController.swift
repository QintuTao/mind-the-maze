//
//  MessagesViewController.swift
//  flexibleProject2 MessagesExtension
//
//  Created by Qintu Tao on 2019-03-26.
//  Copyright Â© 2019 Qintu Tao. All rights reserved.
//
//BUG algorithm failure in move function

import UIKit
import Messages
import SpriteKit

class MessagesViewController: MSMessagesAppViewController {
    var controller = UIViewController()
    var snapShot = UIImage()
    // TODO: change the hearCodedDestination according to the new coordinating system 
    let hardCodedDestination = [19,18]
    var timeFinished = 0
    var maze = GameViewController()
    var menu = MenuViewController()
    // var menu = UIVeiwController()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        self.view = SKView()
        // creating the gameviewcontroller
        guard let mazeViewController = storyboard?.instantiateViewController(withIdentifier: GameViewController.viewControllerIdentifier) as? GameViewController else {
            fatalError("Unable to instantiate a maze from the storyboard")
        }
        
        // creating the menuviewcontroller
        guard let menuViewController = storyboard?.instantiateViewController(withIdentifier: "menu") as? MenuViewController else {fatalError("Unable to instantiate a menu from the storyboard.")}
        
        
        maze = mazeViewController
        menu = menuViewController
        maze.delegate = self
        menu.delegate = self
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        removeAllChildViewControllers()
        if self.presentationStyle == .expanded {
            presentViewController(with: .expanded)
        } else if self.presentationStyle == .compact {
            presentViewController(with: .compact)
        }
        // Use this method to configure the extension and restore previously stored state.
    }
    override func didBecomeActive(with conversation: MSConversation) {
//        snapShot = UIImage.init(view: self.view)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        guard let component = NSURLComponents.init(url: message.url!, resolvingAgainstBaseURL: false) else {
            fatalError("Cannot Initate Component from the received message")
        }
        if let quaryItems = component.queryItems {
            // if player receives a message containing a challenge key
            if quaryItems[0].name == "challenge"{
                // present game view controller
                print("challenge")
                startDayTimer()
            } else if quaryItems[0].name == "result" {
                print("result")
                //TODO: do something relates to reading the message
                
                //these two lines are commented because of a potential "menu view / click" feature
                //requestPresentationStyle(.expanded)
                //presentViewController(with: .expanded)
                
            }
        }
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        removeAllChildViewControllers()
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        print(presentationStyle)
        // Use this method to finalize any behaviors associated with the change in presentation style.
        if presentationStyle == .expanded {
            presentViewController(with: .expanded)
        } else if presentationStyle == .compact {
            presentViewController(with: .compact)
        }
    }
    
    private func presentViewController(with presentationStyle: MSMessagesAppPresentationStyle){
        //TODO: REMOVE ALL THE EXISTING VIEW CONTROLLERS
        var controller =  UIViewController()
        if presentationStyle == .expanded{
            controller = self.maze
            
        }else if presentationStyle == .compact {
            controller = self.menu
            // controller = self.menu
        }
        
        //add View Controller to its parent
        addChild(controller)
        controller.view.frame = self.view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        self.view.addSubview(controller.view)
        
        //add View Controller's view's contrain to its parent view
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: self.view.leftAnchor),
            controller.view.topAnchor.constraint(equalTo: self.view.topAnchor),
            controller.view.rightAnchor.constraint(equalTo: self.view.rightAnchor),
            controller.view.bottomAnchor.constraint(equalTo: self.view.bottomAnchor)
            ])
        
        controller.didMove(toParent: self)
    }
    
    
    
    //remove all the child controllers in a parent view controller
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
    
    private func composeMessage(with type: messageType) {
        
        let messageComponent = composeComponent(with: type)
        guard let messageUrl = messageComponent.url else {
            fatalError("Invalid URL Components")
        }
        
        let messageLayout = MSMessageTemplateLayout()
//        messageLayout.image = self.snapShot
        switch type {
        case .maze:
            messageLayout.caption = "You have spent \(String(self.maze.gameTime)) seconds solving this maze!"
        default:
            messageLayout.caption = "Click here to accept challenge. You may only have 24 hours to accept the challenge. Otherwise you automatically lose the game."
        }
        
        
        let messageSummuaryText = String(self.timeFinished)
        
        let newSession = MSSession.init()
        
        let newMessage = MSMessage(session: newSession)
        newMessage.url = messageUrl
        newMessage.layout = messageLayout
        newMessage.summaryText = messageSummuaryText
        
        self.activeConversation?.insert(newMessage)
    }
    
    private func composeComponent(with type: messageType) -> NSURLComponents{
        guard let component = NSURLComponents(string: "sendingMessage") else {
            fatalError("Invalid base url")
        }

        switch type {
        case .request:

            component.queryItems = [
                NSURLQueryItem(name: "challenge", value: "challenge")
                ] as [URLQueryItem]
            
        default:
            
            component.queryItems = [
                NSURLQueryItem(name: "result", value: "result")
                ] as [URLQueryItem]
            
        }
        return component
    }
    
    //day Timer here
    var dayTimer = Timer()
    var dayTime = 0
    
    //keeps track of dayTimer. Member function of startDayTimer()
    @ objc func dayAction() {
        dayTime += 1
        print(String(dayTime))
        print("counting dayTime")
    }
    
    //actually starts the timer
    func startDayTimer() {
        dayTimer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(MessagesViewController.dayAction), userInfo: nil, repeats: true)
        
    }
    
    //stops dayTimer if 24 hours have passed or if the other player reaches the yellow endpoint of maze.
    func stopDayTimer() {
        if dayTime == 86400 || hardCodedDestination == self.hardCodedDestination {
            self.dayTimer.invalidate()
            self.dayTime = 0
            self.dayTimer = Timer()
        }
    }
}

// sending challenging message when player click on the button
extension MessagesViewController: MenuViewDelegate {
    func composeChallenge() {
        composeMessage(with: .request)
    }
}

// get current player position
extension MessagesViewController: GameViewControllerDelegate{
    func getCurrentPlayerPosition(at X: Int, at Y: Int) {
        // TODO: change x and y position according to the new coordinating system 
        if X == 11 && Y == 11 {
            // extracting timer data here
            stopDayTimer()
            self.timeFinished = maze.gameTime
            requestPresentationStyle(.compact)
            composeMessage(with: .maze)
        }
        
    }
}

extension UIView {
    // adding a function that captures an snapshot of the current view
    func takeSnapShot() -> UIImage {
        let renderer = UIGraphicsImageRenderer(bounds: self.frame)
        return renderer.image {
            rendererContext in layer.render(in: rendererContext.cgContext)
        }
    }
}

extension UIImage {
    // adding a function that creates an snapshot of the current view
    convenience init(view: UIView){
        UIGraphicsBeginImageContext(view.bounds.size)
        view.layer.render(in: UIGraphicsGetCurrentContext()!)
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        self.init(cgImage: (image?.cgImage)!)
    }
}



